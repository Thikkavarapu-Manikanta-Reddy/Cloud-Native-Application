name: Packer Machine Image Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
        DB_HOSTNAME: ${{ secrets.DB_HOSTNAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_NAME: ${{ secrets.DB_NAME }}
        PORT: ${{ secrets.PORT}}
        TEMPLATE_NAME: ${{secrets.TEMPLATE_NAME}}
        ZONE_OR_REGION: ${{secrets.REGION}}
        PROJECT_ID: ${{ secrets.PROJECT_ID }}
        INSTANCE_GROUP_NAME: ${{secrets.INSTANCE_GROUP_NAME}} 

    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD }}
        ports:
          - 3306:3306

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'
      
      - name: Create .env file
        run: |
          touch .env
          echo "DB_HOSTNAME=${{ secrets.DB_HOSTNAME }}" > .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "PORT= ${{ secrets.PORT}}" >> .env
      
      - name: Build application artifact
        run: zip -r webapp.zip ./
      
      - name: Install Dependencies
        run: npm install

      - name: Run Integration Tests
        run: npm run test:integration

      - name: Install uuid-runtime
        run: sudo apt-get update && sudo apt-get install -y uuid-runtime

      # Authenticate with GCP using service account key
      - name: Set up Google Cloud SDK
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Install Packer
        uses: hashicorp/setup-packer@main

      - name: Build image
        run: |
          packer init -var "project_id=${{ secrets.GCP_PROJECT_ID }}" -var "zone=${{ secrets.ZONE }}" packer
          packer build -var "project_id=${{ secrets.GCP_PROJECT_ID }}" -var "zone=${{ secrets.ZONE }}" packer

      - name: GET Packer Image ID
        id: GET_Packer_Image_Id
        run: |
          PACKER_BUILD_IMAGE_ID=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d ":" -f2)
          echo $PACKER_BUILD_IMAGE_ID
          echo PACKER_BUILD_IMAGE_ID=$PACKER_BUILD_IMAGE_ID >> $GITHUB_ENV
      
      - name: Check Packer Image ID
        run: echo $PACKER_BUILD_IMAGE_ID

      - name: Generate UUID and append to VM_INSTANCE_TEMPLATE_NAME
        run: |
          WORKFLOW_UUID=$(uuidgen | tr -d '-')
          echo "TEMPLATE_NAME=${{ env.TEMPLATE_NAME }}-$WORKFLOW_UUID" >> $GITHUB_ENV
          echo $GITHUB_ENV
          echo "template name -" $TEMPLATE_NAME

      - name: Create instance template
        env:
            # PROJECT_ID: ${{secrets.PROJECT_ID}}
            NEW_TEMPLATE_DESCRIPTION : ${{secrets.NEW_TEMPLATE_DESCRIPTION}} 
            VM_TYPE: ${{secrets.VM_TYPE}}
            REGION: ${{secrets.REGION}}
            METADATA_STARTUP_SCRIPT: ${{ secrets.METADATA_STARTUP_SCRIPT }}
            TEMPLATE_MAINTENANCE_POLICY: ${{secrets.TEMPLATE_MAINTENANCE_POLICY}}
            TEMPLATE_PROVISIONING_MODEL: ${{secrets.TEMPLATE_PROVISIONING_MODEL}}
            VM_SERVICE_ACCOUNT: ${{secrets.VM_SERVICE_ACCOUNT}}
            VM_SERVICE_ACCOUNT_SCOPES: ${{secrets.VM_SERVICE_ACCOUNT_SCOPES}}
            VM_TAG: ${{secrets.VM_TAG }}
            VM_DISK_SIZE_GB: ${{secrets.VM_DISK_SIZE_GB}}
            VM_DISK_TYPE: ${{secrets.VM_DISK_TYPE}}
            VM_DISK_AUTO_DELETE: ${{ secrets.VM_DISK_AUTO_DELETE}}
            VM_DISK_BOOT: ${{secrets.VM_DISK_BOOT}}
            VM_KMS_KEY_LINK: ${{secrets.VM_KMS_KEY_LINK}}
            VM_DEVICE_NAME:  ${{secrets.VM_DEVICE_NAME}}
            # TEMPLATE_NAME: ${{secrets.TEMPLATE_NAME}} 
            NETWORK_TIER: ${{secrets.NETWORK_TIER}}
            SUBNET: ${{secrets.SUBNET}}

        run: |
          gcloud compute instance-templates create $TEMPLATE_NAME  \
            --project=$PROJECT_ID \
            --description="$NEW_TEMPLATE_DESCRIPTION" \
            --instance-template-region="$REGION" \
            --machine-type="$VM_TYPE" \
            --network-interface="network-tier=$NETWORK_TIER,subnet=$SUBNET" \
            --metadata="startup-script=$METADATA_STARTUP_SCRIPT" \
            --maintenance-policy="$TEMPLATE_MAINTENANCE_POLICY" \
            --provisioning-model="$TEMPLATE_PROVISIONING_MODEL" \
            --service-account="$VM_SERVICE_ACCOUNT" \
            --scopes="$VM_SERVICE_ACCOUNT_SCOPES" \
            --region="$REGION" \
            --tags="$VM_TAG" \
            --create-disk="auto-delete=$VM_DISK_AUTO_DELETE,boot=$VM_DISK_BOOT,device-name=$DEVICE_NAME,image=${{ env.PACKER_BUILD_IMAGE_ID }},kms-key=$VM_KMS_KEY_LINK,mode=rw,size=$VM_DISK_SIZE_GB,type=$VM_DISK_TYPE" \
            --no-shielded-secure-boot \
            --shielded-vtpm \
            --shielded-integrity-monitoring \
            --reservation-affinity=none

      - name: Update Group Manager+

        # env:
          # INSTANCE_GROUP_NAME: ${{secrets.INSTANCE_GROUP_NAME}} 
          # TEMPLATE_NAME: ${{secrets.TEMPLATE_NAME}}  
          # ZONE_OR_REGION: ${{secrets.REGION}}
          # PROJECT_ID: ${{ secrets.PROJECT_ID }}
        run: |
          gcloud compute instance-groups managed set-instance-template \
            ${{ env.INSTANCE_GROUP_NAME }} \
            --template=projects/${{ env.PROJECT_ID }}/regions/${{ env.ZONE_OR_REGION }}/instanceTemplates/$TEMPLATE_NAME \
            --region=${{ env.ZONE_OR_REGION }} \
            --project=${{ env.PROJECT_ID }}

      - name: Starting Rolling Update
        # env:
          # INSTANCE_GROUP_NAME: ${{secrets.INSTANCE_GROUP_NAME}} 
          # TEMPLATE_NAME: ${{secrets.TEMPLATE_NAME}}  
          # ZONE_OR_REGION: ${{secrets.REGION}}
          # PROJECT_ID: ${{ secrets.PROJECT_ID }}
        run : |
           gcloud compute instance-groups managed rolling-action start-update ${{ env.INSTANCE_GROUP_NAME }} \
            --version=template=projects/${{ env.PROJECT_ID }}/regions/${{ env.ZONE_OR_REGION }}/instanceTemplates/$TEMPLATE_NAME \
            --max-surge=5 \
            --region=${{ env.ZONE_OR_REGION }} \
            --project=${{ env.PROJECT_ID }}
   
      - name: Monitor instance group update
        # env:
          # INSTANCE_GROUP_NAME: ${{secrets.INSTANCE_GROUP_NAME}} 
          # TEMPLATE_NAME: ${{secrets.TEMPLATE_NAME}}  
          # ZONE_OR_REGION: ${{secrets.REGION}}
          # PROJECT_ID: ${{ secrets.PROJECT_ID }}
        run: |
          status="RUNNING"
          while [ "$status" != "True" ]; do
          status=$(gcloud compute instance-groups managed describe $INSTANCE_GROUP_NAME --region=$ZONE_OR_REGION --project=$PROJECT_ID --format="value(status.versionTarget.isReached)")
          sleep 10
          done